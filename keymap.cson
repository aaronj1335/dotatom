# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth

'atom-workspace':
  'cmd-r': 'run-command:run'

'html':
  'cmd-o': 'fuzzy-finder:toggle-file-finder'
  'cmd-]': 'pane:show-next-item'
  'cmd-[': 'pane:show-previous-item'

'atom-text-editor.vim-mode.command-mode':
  'U': 'core:redo'

'atom-text-editor.vim-mode:not(.insert-mode):not([mini])':
  'tab': 'vim-mode:bracket-matching-motion'

# unset a bunch of stuff (cause order matters?)

'.platform-darwin atom-text-editor':
  'cmd-r': 'unset!'

'atom-workspace atom-text-editor:not([mini])':
  'cmd-[': 'unset!'
  'cmd-]': 'unset!'

'body':
  'cmd-o': 'unset!'

'atom-text-editor.vim-mode:not(.insert-mode)':
  '/': 'unset!'

# end unsetting

'atom-text-editor.vim-mode:not(.insert-mode)':
  '/': 'find-and-replace:show'
